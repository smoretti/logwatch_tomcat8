#!/usr/bin/perl

# Detail level
$Detail = $ENV{'LOGWATCH_DETAIL_LEVEL'} || 5;


# total number of errors in log file
my $Total_err = 0;
# hash with only unmatched errors, where KEY - error message, VALUE - number of errors of this type
my %Unmatched_err = ();

my %Matched_err = ();
# default value of error message
my $Message = "";
# total number of unmatched errors
my $Unmatched_err_num;

my $Match_found=0;

# typical errors, whitch only will counted
my @Typical_errors = ();

sub is_typical {
	
	my $input_message = $_[0];

	foreach my $curr_err (@Typical_errors) {
		if ($input_message =~ /$curr_err/) {
			if (!exists $Matched_err{$curr_err}) {
				$Matched_err{$curr_err} = 0;
			}
			$Matched_err{$curr_err}++;
			$Total_err++;
			return 1; #true
			last;
		} else {
			return 0; #false
		}
	}	 
}

# main loop
while (defined($line = <STDIN>)) {
	# defining start of new line

	if ($line =~ /^((ERROR|INFO|DEBUG|WARN.*)+\s+\[.*\])/) {
		# if previous collected message - is Error message
		if (($Message =~ /^(ERROR)/) && (!is_typical($Message))) {

			# if it is a new message, then add this message to hash
			if (!exists $Unmatched_err{$Message}) {
				$Unmatched_err{$Message} = 0;
			}
			# increment messages counters
			$Unmatched_err{ $Message } = $Unmatched_err{$Message}+1;
			$Total_err++;
			$Message="";
		}

			# start new unmatched entry
			# remove date 
			$line =~ s/\[.*(:+[0-9]+[0-9]+){2}\,+([0-9]+){3}\]//;
			# start recording new message 
			$Message = $line;
	# Ignorable strings (java stacktrace)
	} elsif($line =~ /^(.+(at+\s+)|(.*Hint:)|(.*Position:))|((\s+more)$)/) {
		next;
	} else {
		# construct nessesary strings to message
		$Message = $Message.$line;
	}
}

# white last message
if (($Message =~ /^(ERROR)/) && (!is_typical($Message))) {
	# if it is a new message, then add this message to hash
	if (!exists $Unmatched_err{$Message}) {
		$Unmatched_err{$Message} = 0;
	}
	# increment messages counters
	$Unmatched_err{ $Message } = $Unmatched_err{$Message}+1;
	$Total_err++;
}

# Matched errors
if (%Matched_err) {
	print "<- Mathched errors ->\n-----------\n";
	while ( my ($key, $value) = each(%Matched_err) ) {
		chomp $key;
		print "$key: 	$value Time(s)\n";
	}
}

# Unmatched entries
if (%Unmatched_err) {
	# get total number of unmatched errors in file
	$Unmatched_err_num = scalar keys %Unmatched_err;
	print "<- Unmatched errors: $Unmatched_err_num ->\n-----------\n";
	# if log detail level is NOT LOW
	if ($Detail != 0) {
		# Print unmatched entryes
		while ( my ($key, $value) = each(%Unmatched_err) ) {
			chomp $key;
			print "Message: $key\n$value Time(s)\n---\n";
		}
	}
}
# Print total result
print "Total num of Errors: $Total_err";

